# Generated by Django 4.2.22 on 2025-10-09 03:08

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AnomalyDetectionDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, verbose_name='数据集名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='数据集描述')),
            ],
            options={
                'verbose_name': '异常检测数据集',
                'verbose_name_plural': '异常检测数据集',
            },
        ),
        migrations.CreateModel(
            name='ClassificationDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, verbose_name='数据集名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='数据集描述')),
            ],
            options={
                'verbose_name': '分类任务数据集',
                'verbose_name_plural': '分类任务数据集',
            },
        ),
        migrations.CreateModel(
            name='ClassificationTrainData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, verbose_name='训练数据名称')),
                ('train_data', models.JSONField(help_text='存储训练数据', verbose_name='训练数据')),
                ('metadata', models.JSONField(blank=True, help_text='训练数据元信息', null=True, verbose_name='元数据')),
                ('is_train_data', models.BooleanField(default=False, help_text='是否为训练数据', verbose_name='是否为训练数据')),
                ('is_val_data', models.BooleanField(default=False, help_text='是否为验证数据', verbose_name='是否为验证数据')),
                ('is_test_data', models.BooleanField(default=False, help_text='是否为测试数据', verbose_name='是否为测试数据')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='train_data', to='mlops.classificationdataset', verbose_name='数据集')),
            ],
            options={
                'verbose_name': '分类任务训练数据',
                'verbose_name_plural': '分类任务训练数据',
            },
        ),
        migrations.CreateModel(
            name='DataPointFeaturesInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('windows_size', models.IntegerField(default=30, help_text='滚动窗口大小', verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='LogClusteringDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, verbose_name='数据集名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='数据集描述')),
            ],
            options={
                'verbose_name': '日志聚类数据集',
                'verbose_name_plural': '日志聚类数据集',
            },
        ),
        migrations.CreateModel(
            name='LogClusteringTrainData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, verbose_name='训练数据名称')),
                ('train_data', models.JSONField(help_text='存储日志聚类训练数据', verbose_name='训练数据')),
                ('metadata', models.JSONField(blank=True, help_text='训练数据元信息', null=True, verbose_name='元数据')),
                ('is_train_data', models.BooleanField(default=False, help_text='是否为训练数据', verbose_name='是否为训练数据')),
                ('is_val_data', models.BooleanField(default=False, help_text='是否为验证数据', verbose_name='是否为验证数据')),
                ('is_test_data', models.BooleanField(default=False, help_text='是否为测试数据', verbose_name='是否为测试数据')),
                ('log_count', models.IntegerField(default=0, help_text='数据集中包含的日志条数', verbose_name='日志条数')),
                ('log_source', models.CharField(blank=True, help_text='日志数据的来源系统或文件', max_length=200, null=True, verbose_name='日志来源')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='train_data', to='mlops.logclusteringdataset', verbose_name='数据集')),
            ],
            options={
                'verbose_name': '日志聚类训练数据',
                'verbose_name_plural': '日志聚类训练数据',
            },
        ),
        migrations.CreateModel(
            name='RasaDatasets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, verbose_name='数据集名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='数据集描述')),
            ],
            options={
                'verbose_name': 'Rasa对话机器人数据集',
                'verbose_name_plural': 'Rasa对话机器人数据集',
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesPredictDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, verbose_name='数据集名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='数据集描述')),
            ],
            options={
                'verbose_name': '时间序列预测数据集',
                'verbose_name_plural': '时间序列预测数据集',
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesPredictTrainData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, verbose_name='训练数据名称')),
                ('train_data', models.JSONField(help_text='存储训练数据', verbose_name='训练数据')),
                ('metadata', models.JSONField(blank=True, help_text='训练数据元信息', null=True, verbose_name='元数据')),
                ('is_train_data', models.BooleanField(default=False, help_text='是否为训练数据', verbose_name='是否为训练数据')),
                ('is_val_data', models.BooleanField(default=False, help_text='是否为验证数据', verbose_name='是否为验证数据')),
                ('is_test_data', models.BooleanField(default=False, help_text='是否为测试数据', verbose_name='是否为测试数据')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='train_data', to='mlops.timeseriespredictdataset', verbose_name='数据集')),
            ],
            options={
                'verbose_name': '时间序列预测训练数据',
                'verbose_name_plural': '时间序列预测训练数据',
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesPredictTrainJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, verbose_name='任务名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='任务描述')),
                ('status', models.CharField(choices=[('pending', '待训练'), ('running', '训练中'), ('completed', '已完成'), ('failed', '训练失败')], default='pending', help_text='训练任务的当前状态', max_length=20, verbose_name='任务状态')),
                ('algorithm', models.CharField(choices=[('Prophet', 'Prophet')], help_text='使用的时间序列预测算法模型', max_length=50, verbose_name='算法模型')),
                ('hyperopt_config', models.JSONField(default=dict, help_text='用于超参数优化的配置参数', verbose_name='超参数优化配置')),
                ('max_evals', models.IntegerField(default=200, help_text='超参数优化的最大评估次数', verbose_name='最大评估次数')),
                ('test_data_id', models.ForeignKey(help_text='关联的时间序列预测测试数据集', on_delete=django.db.models.deletion.CASCADE, related_name='test_jobs', to='mlops.timeseriespredicttraindata', verbose_name='测试数据集')),
                ('train_data_id', models.ForeignKey(help_text='关联的时间序列预测训练数据集', on_delete=django.db.models.deletion.CASCADE, related_name='train_jobs', to='mlops.timeseriespredicttraindata', verbose_name='训练数据集')),
                ('val_data_id', models.ForeignKey(help_text='关联的时间序列预测验证数据集', on_delete=django.db.models.deletion.CASCADE, related_name='val_jobs', to='mlops.timeseriespredicttraindata', verbose_name='验证数据集')),
            ],
            options={
                'verbose_name': '时间序列预测训练任务',
                'verbose_name_plural': '时间序列预测训练任务',
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesPredictServing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(help_text='服务的名称', max_length=100, verbose_name='服务名称')),
                ('description', models.TextField(blank=True, help_text='服务的详细描述', null=True, verbose_name='服务描述')),
                ('model_version', models.CharField(default='latest', help_text='模型版本', max_length=50, verbose_name='模型版本')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', help_text='服务的当前状态', max_length=20, verbose_name='服务状态')),
                ('time_series_predict_train_job', models.ForeignKey(help_text='关联的时间序列预测训练任务模型ID', on_delete=django.db.models.deletion.CASCADE, related_name='servings', to='mlops.timeseriespredicttrainjob', verbose_name='模型ID')),
            ],
            options={
                'verbose_name': '时间序列预测服务',
                'verbose_name_plural': '时间序列预测服务',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RasaStory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='故事名称')),
                ('steps', models.JSONField(default=list, verbose_name='故事步骤')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stories', to='mlops.rasadatasets', verbose_name='数据集')),
            ],
            options={
                'verbose_name': 'Maintainer Fields',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RasaSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='槽位名称')),
                ('slot_type', models.CharField(choices=[('text', '记录普通文本'), ('categorical', '记录分类类别，枚举'), ('float', '记录数值'), ('bool', '记录布尔值'), ('list', '记录数值列表')], default='text', max_length=20, verbose_name='槽位类型')),
                ('is_apply', models.BooleanField(default=False, verbose_name='是否应用')),
                ('values', models.JSONField(default=list, help_text='type为category时选择填充此项', verbose_name='槽位值')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slots', to='mlops.rasadatasets', verbose_name='数据集')),
            ],
            options={
                'verbose_name': '槽位',
                'verbose_name_plural': '槽位',
            },
        ),
        migrations.CreateModel(
            name='RasaRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='规则名称')),
                ('steps', models.JSONField(default=list, verbose_name='规则步骤')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='mlops.rasadatasets', verbose_name='数据集')),
            ],
            options={
                'verbose_name': 'rasa规则',
                'verbose_name_plural': 'rasa规则',
            },
        ),
        migrations.CreateModel(
            name='RasaResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='响应名称')),
                ('example', models.JSONField(default=list, verbose_name='响应示例')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='mlops.rasadatasets', verbose_name='数据集')),
            ],
            options={
                'verbose_name': 'rasa响应',
                'verbose_name_plural': 'rasa响应',
            },
        ),
        migrations.CreateModel(
            name='RasaPipeline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='管道名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='管道描述')),
                ('config', models.JSONField(default=dict, help_text='Rasa pipeline配置，包含tokenizer、featurizer、classifier等组件', verbose_name='管道配置')),
                ('datasets', models.ManyToManyField(blank=True, help_text='该管道关联的训练数据集', related_name='pipelines', to='mlops.rasadatasets', verbose_name='关联数据集')),
            ],
            options={
                'verbose_name': 'Rasa训练管道',
                'verbose_name_plural': 'Rasa训练管道',
            },
        ),
        migrations.CreateModel(
            name='RasaIntent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='意图名称')),
                ('example', models.JSONField(default=list, verbose_name='意图示例')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intents', to='mlops.rasadatasets', verbose_name='数据集')),
            ],
            options={
                'verbose_name': '意图',
                'verbose_name_plural': '意图',
            },
        ),
        migrations.CreateModel(
            name='RasaForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='表单名称')),
                ('slots', models.JSONField(default=list, help_text='表单字段列表', verbose_name='表单字段')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forms', to='mlops.rasadatasets', verbose_name='数据集')),
            ],
            options={
                'verbose_name': '表单',
                'verbose_name_plural': '表单',
            },
        ),
        migrations.CreateModel(
            name='RasaEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='实体名称')),
                ('entity_type', models.CharField(choices=[('Text', '自由标注'), ('Lookup', '枚举表')], default='Text', max_length=20, verbose_name='类型')),
                ('example', models.JSONField(default=list, help_text='实体的具体取值列表', verbose_name='实体值')),
                ('description', models.TextField(blank=True, null=True, verbose_name='描述')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='mlops.rasadatasets', verbose_name='数据集')),
            ],
            options={
                'verbose_name': '实体',
                'verbose_name_plural': '实体',
            },
        ),
        migrations.CreateModel(
            name='RasaAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Action名称')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='mlops.rasadatasets', verbose_name='数据集')),
            ],
            options={
                'verbose_name': 'Rasa对话机器人Action',
                'verbose_name_plural': 'Rasa对话机器人Actions',
            },
        ),
        migrations.CreateModel(
            name='LogClusteringTrainJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, verbose_name='任务名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='任务描述')),
                ('status', models.CharField(choices=[('pending', '待训练'), ('running', '训练中'), ('completed', '已完成'), ('failed', '训练失败')], default='pending', help_text='训练任务的当前状态', max_length=20, verbose_name='任务状态')),
                ('algorithm', models.CharField(choices=[('KMeans', 'K-Means'), ('DBSCAN', 'DBSCAN'), ('AgglomerativeClustering', '层次聚类'), ('Drain', 'Drain'), ('LogCluster', 'LogCluster')], help_text='使用的日志聚类算法模型', max_length=50, verbose_name='算法模型')),
                ('hyperopt_config', models.JSONField(default=dict, help_text='用于超参数优化的配置参数', verbose_name='超参数优化配置')),
                ('max_evals', models.IntegerField(default=200, help_text='超参数优化的最大评估次数', verbose_name='最大评估次数')),
                ('cluster_count', models.IntegerField(default=10, help_text='预期的聚类簇数量（适用于K-Means等算法）', verbose_name='聚类数量')),
                ('min_samples', models.IntegerField(default=5, help_text='形成聚类所需的最小样本数（适用于DBSCAN等算法）', verbose_name='最小样本数')),
                ('eps', models.FloatField(default=0.5, help_text='DBSCAN算法的邻域半径参数', verbose_name='邻域半径')),
                ('test_data_id', models.ForeignKey(blank=True, help_text='关联的日志聚类测试数据集', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test_jobs', to='mlops.logclusteringtraindata', verbose_name='测试数据集')),
                ('train_data_id', models.ForeignKey(help_text='关联的日志聚类训练数据集', on_delete=django.db.models.deletion.CASCADE, related_name='train_jobs', to='mlops.logclusteringtraindata', verbose_name='训练数据集')),
                ('val_data_id', models.ForeignKey(blank=True, help_text='关联的日志聚类验证数据集', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='val_jobs', to='mlops.logclusteringtraindata', verbose_name='验证数据集')),
            ],
            options={
                'verbose_name': '日志聚类训练任务',
                'verbose_name_plural': '日志聚类训练任务',
            },
        ),
        migrations.CreateModel(
            name='LogClusteringServing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(help_text='日志聚类服务的名称', max_length=100, verbose_name='服务名称')),
                ('description', models.TextField(blank=True, help_text='日志聚类服务的详细描述', null=True, verbose_name='服务描述')),
                ('model_version', models.CharField(default='latest', help_text='模型版本', max_length=50, verbose_name='模型版本')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', help_text='服务的当前状态', max_length=20, verbose_name='服务状态')),
                ('api_endpoint', models.URLField(blank=True, help_text='日志聚类服务的API访问端点', null=True, verbose_name='API端点')),
                ('max_requests_per_minute', models.IntegerField(default=1000, help_text='服务的请求频率限制', verbose_name='每分钟最大请求数')),
                ('supported_log_formats', models.JSONField(default=list, help_text='服务支持的日志格式列表', verbose_name='支持的日志格式')),
                ('log_clustering_train_job', models.ForeignKey(help_text='关联的日志聚类训练任务模型ID', on_delete=django.db.models.deletion.CASCADE, related_name='servings', to='mlops.logclusteringtrainjob', verbose_name='模型ID')),
            ],
            options={
                'verbose_name': '日志聚类服务',
                'verbose_name_plural': '日志聚类服务',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClassificationTrainJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, verbose_name='任务名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='任务描述')),
                ('status', models.CharField(choices=[('pending', '待训练'), ('running', '训练中'), ('completed', '已完成'), ('failed', '训练失败')], default='pending', help_text='训练任务的当前状态', max_length=20, verbose_name='任务状态')),
                ('algorithm', models.CharField(choices=[('RandomForest', 'Random Forest'), ('XGBoost', 'XGBoost'), ('LogisticRegression', 'Logistic Regression'), ('SVM', 'Support Vector Machine'), ('NeuralNetwork', 'Neural Network')], help_text='使用的分类算法模型', max_length=50, verbose_name='算法模型')),
                ('hyperopt_config', models.JSONField(default=dict, help_text='用于超参数优化的配置参数', verbose_name='超参数优化配置')),
                ('max_evals', models.IntegerField(default=200, help_text='超参数优化的最大评估次数', verbose_name='最大评估次数')),
                ('test_data_id', models.ForeignKey(help_text='关联的分类测试数据集', on_delete=django.db.models.deletion.CASCADE, related_name='test_jobs', to='mlops.classificationtraindata', verbose_name='测试数据集')),
                ('train_data_id', models.ForeignKey(help_text='关联的分类训练数据集', on_delete=django.db.models.deletion.CASCADE, related_name='train_jobs', to='mlops.classificationtraindata', verbose_name='训练数据集')),
                ('val_data_id', models.ForeignKey(help_text='关联的分类验证数据集', on_delete=django.db.models.deletion.CASCADE, related_name='val_jobs', to='mlops.classificationtraindata', verbose_name='验证数据集')),
            ],
            options={
                'verbose_name': '分类任务训练作业',
                'verbose_name_plural': '分类任务训练作业',
            },
        ),
        migrations.CreateModel(
            name='ClassificationTrainHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('algorithm', models.CharField(choices=[('RandomForest', 'Random Forest'), ('XGBoost', 'XGBoost'), ('LogisticRegression', 'Logistic Regression'), ('SVM', 'Support Vector Machine'), ('NeuralNetwork', 'Neural Network')], help_text='使用的分类算法模型', max_length=50, verbose_name='算法模型')),
                ('hyperopt_config', models.JSONField(default=dict, help_text='用于超参数优化的配置参数', verbose_name='超参数优化配置')),
                ('status', models.CharField(choices=[('pending', '待训练'), ('running', '训练中'), ('completed', '已完成'), ('failed', '训练失败')], default='pending', help_text='训练任务的当前状态', max_length=20, verbose_name='任务状态')),
                ('test_data_id', models.ForeignKey(help_text='关联的分类测试数据集', on_delete=django.db.models.deletion.CASCADE, related_name='test_history', to='mlops.classificationtraindata', verbose_name='测试数据集')),
                ('train_data_id', models.ForeignKey(help_text='关联的分类训练数据集', on_delete=django.db.models.deletion.CASCADE, related_name='train_history', to='mlops.classificationtraindata', verbose_name='训练数据集')),
                ('val_data_id', models.ForeignKey(help_text='关联的分类验证数据集', on_delete=django.db.models.deletion.CASCADE, related_name='val_history', to='mlops.classificationtraindata', verbose_name='验证数据集')),
            ],
            options={
                'verbose_name': '分类任务训练历史',
                'verbose_name_plural': '分类任务训练历史',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClassificationServing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(help_text='服务的名称', max_length=100, verbose_name='服务名称')),
                ('description', models.TextField(blank=True, help_text='服务的详细描述', null=True, verbose_name='服务描述')),
                ('model_version', models.CharField(default='latest', help_text='模型版本', max_length=50, verbose_name='模型版本')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', help_text='服务的当前状态', max_length=20, verbose_name='服务状态')),
                ('classification_train_job', models.ForeignKey(help_text='关联的分类训练任务模型ID', on_delete=django.db.models.deletion.CASCADE, related_name='servings', to='mlops.classificationtrainjob', verbose_name='模型ID')),
            ],
            options={
                'verbose_name': '分类任务服务',
                'verbose_name_plural': '分类任务服务',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AnomalyDetectionTrainData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, verbose_name='训练数据名称')),
                ('train_data', models.JSONField(help_text='存储训练数据', verbose_name='训练数据')),
                ('metadata', models.JSONField(blank=True, help_text='训练数据元信息', null=True, verbose_name='元数据')),
                ('is_train_data', models.BooleanField(default=False, help_text='是否为训练数据', verbose_name='是否为训练数据')),
                ('is_val_data', models.BooleanField(default=False, help_text='是否为验证数据', verbose_name='是否为验证数据')),
                ('is_test_data', models.BooleanField(default=False, help_text='是否为测试数据', verbose_name='是否为测试数据')),
                ('anomaly_point_count', models.PositiveIntegerField(default=0, help_text='异常点的数量', verbose_name='异常点数量')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='train_data', to='mlops.anomalydetectiondataset', verbose_name='数据集')),
            ],
            options={
                'verbose_name': '异常检测训练数据',
                'verbose_name_plural': '异常检测训练数据',
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesPredictTrainHistory',
            fields=[
                ('datapointfeaturesinfo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mlops.datapointfeaturesinfo')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('algorithm', models.CharField(choices=[('Prophet', 'Prophet')], help_text='使用的时间序列预测算法模型', max_length=50, verbose_name='算法模型')),
                ('hyperopt_config', models.JSONField(default=dict, help_text='用于超参数优化的配置参数', verbose_name='超参数优化配置')),
                ('status', models.CharField(choices=[('running', '训练中'), ('completed', '已完成'), ('failed', '训练失败')], default='pending', help_text='训练任务的当前状态', max_length=20, verbose_name='任务状态')),
                ('test_data_id', models.ForeignKey(help_text='关联的时间序列预测测试数据集', on_delete=django.db.models.deletion.CASCADE, related_name='test_history', to='mlops.timeseriespredicttraindata', verbose_name='测试数据集')),
                ('train_data_id', models.ForeignKey(help_text='关联的时间序列预测训练数据集', on_delete=django.db.models.deletion.CASCADE, related_name='train_history', to='mlops.timeseriespredicttraindata', verbose_name='训练数据集')),
                ('val_data_id', models.ForeignKey(help_text='关联的时间序列预测验证数据集', on_delete=django.db.models.deletion.CASCADE, related_name='val_history', to='mlops.timeseriespredicttraindata', verbose_name='验证数据集')),
            ],
            options={
                'verbose_name': '时间序列预测训练历史',
                'verbose_name_plural': '时间序列预测训练历史',
            },
            bases=('mlops.datapointfeaturesinfo', models.Model),
        ),
        migrations.CreateModel(
            name='LogClusteringTrainHistory',
            fields=[
                ('datapointfeaturesinfo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mlops.datapointfeaturesinfo')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('algorithm', models.CharField(choices=[('KMeans', 'K-Means'), ('DBSCAN', 'DBSCAN'), ('AgglomerativeClustering', '层次聚类'), ('Drain', 'Drain'), ('LogCluster', 'LogCluster')], help_text='使用的日志聚类算法模型', max_length=50, verbose_name='算法模型')),
                ('hyperopt_config', models.JSONField(default=dict, help_text='用于超参数优化的配置参数', verbose_name='超参数优化配置')),
                ('status', models.CharField(choices=[('pending', '待训练'), ('running', '训练中'), ('completed', '已完成'), ('failed', '训练失败')], default='pending', help_text='训练任务的当前状态', max_length=20, verbose_name='任务状态')),
                ('cluster_count', models.IntegerField(default=0, help_text='训练后实际产生的聚类簇数量', verbose_name='实际聚类数量')),
                ('silhouette_score', models.FloatField(blank=True, help_text='聚类质量评估的轮廓系数', null=True, verbose_name='轮廓系数')),
                ('davies_bouldin_score', models.FloatField(blank=True, help_text='聚类质量评估的Davies-Bouldin指数', null=True, verbose_name='Davies-Bouldin指数')),
                ('calinski_harabasz_score', models.FloatField(blank=True, help_text='聚类质量评估的Calinski-Harabasz指数', null=True, verbose_name='Calinski-Harabasz指数')),
                ('test_data_id', models.ForeignKey(blank=True, help_text='关联的日志聚类测试数据集', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test_history', to='mlops.logclusteringtraindata', verbose_name='测试数据集')),
                ('train_data_id', models.ForeignKey(help_text='关联的日志聚类训练数据集', on_delete=django.db.models.deletion.CASCADE, related_name='train_history', to='mlops.logclusteringtraindata', verbose_name='训练数据集')),
                ('val_data_id', models.ForeignKey(blank=True, help_text='关联的日志聚类验证数据集', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='val_history', to='mlops.logclusteringtraindata', verbose_name='验证数据集')),
            ],
            options={
                'verbose_name': '日志聚类训练历史',
                'verbose_name_plural': '日志聚类训练历史',
            },
            bases=('mlops.datapointfeaturesinfo', models.Model),
        ),
        migrations.CreateModel(
            name='AnomalyDetectionTrainJob',
            fields=[
                ('datapointfeaturesinfo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mlops.datapointfeaturesinfo')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, verbose_name='任务名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='任务描述')),
                ('status', models.CharField(choices=[('pending', '待训练'), ('running', '训练中'), ('completed', '已完成'), ('failed', '训练失败')], default='pending', help_text='训练任务的当前状态', max_length=20, verbose_name='任务状态')),
                ('algorithm', models.CharField(choices=[('RandomForest', '随机森林')], help_text='使用的异常检测算法模型', max_length=50, verbose_name='算法模型')),
                ('hyperopt_config', models.JSONField(default=dict, help_text='用于超参数优化的配置参数', verbose_name='超参数优化配置')),
                ('max_evals', models.IntegerField(default=200, help_text='超参数优化的最大评估次数', verbose_name='最大评估次数')),
                ('test_data_id', models.ForeignKey(help_text='关联的异常检测测试数据集', on_delete=django.db.models.deletion.CASCADE, related_name='test_jobs', to='mlops.anomalydetectiontraindata', verbose_name='测试数据集')),
                ('train_data_id', models.ForeignKey(help_text='关联的异常检测训练数据集', on_delete=django.db.models.deletion.CASCADE, related_name='train_jobs', to='mlops.anomalydetectiontraindata', verbose_name='训练数据集')),
                ('val_data_id', models.ForeignKey(help_text='关联的异常检测验证数据集', on_delete=django.db.models.deletion.CASCADE, related_name='val_jobs', to='mlops.anomalydetectiontraindata', verbose_name='验证数据集')),
            ],
            options={
                'verbose_name': '异常检测训练任务',
                'verbose_name_plural': '异常检测训练任务',
            },
            bases=('mlops.datapointfeaturesinfo', models.Model),
        ),
        migrations.CreateModel(
            name='AnomalyDetectionTrainHistory',
            fields=[
                ('datapointfeaturesinfo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mlops.datapointfeaturesinfo')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('algorithm', models.CharField(choices=[('RandomForest', '随机森林')], help_text='使用的异常检测算法模型', max_length=50, verbose_name='算法模型')),
                ('hyperopt_config', models.JSONField(default=dict, help_text='用于超参数优化的配置参数', verbose_name='超参数优化配置')),
                ('status', models.CharField(choices=[('running', '训练中'), ('completed', '已完成'), ('failed', '训练失败')], default='pending', help_text='训练任务的当前状态', max_length=20, verbose_name='任务状态')),
                ('test_data_id', models.ForeignKey(help_text='关联的异常检测测试数据集', on_delete=django.db.models.deletion.CASCADE, related_name='test_history', to='mlops.anomalydetectiontraindata', verbose_name='测试数据集')),
                ('train_data_id', models.ForeignKey(help_text='关联的异常检测训练数据集', on_delete=django.db.models.deletion.CASCADE, related_name='train_history', to='mlops.anomalydetectiontraindata', verbose_name='训练数据集')),
                ('val_data_id', models.ForeignKey(help_text='关联的异常检测验证数据集', on_delete=django.db.models.deletion.CASCADE, related_name='val_history', to='mlops.anomalydetectiontraindata', verbose_name='验证数据集')),
            ],
            options={
                'verbose_name': '异常检测训练历史',
                'verbose_name_plural': '异常检测训练历史',
            },
            bases=('mlops.datapointfeaturesinfo', models.Model),
        ),
        migrations.CreateModel(
            name='AnomalyDetectionServing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(help_text='服务的名称', max_length=100, verbose_name='服务名称')),
                ('description', models.TextField(blank=True, help_text='服务的详细描述', null=True, verbose_name='服务描述')),
                ('model_version', models.CharField(default='latest', help_text='模型版本', max_length=50, verbose_name='模型版本')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', help_text='服务的当前状态', max_length=20, verbose_name='服务状态')),
                ('anomaly_threshold', models.FloatField(default=0.5, help_text='用于判断异常的阈值', verbose_name='异常阈值')),
                ('anomaly_detection_train_job', models.ForeignKey(help_text='关联的异常检测训练任务模型ID', on_delete=django.db.models.deletion.CASCADE, related_name='servings', to='mlops.anomalydetectiontrainjob', verbose_name='模型ID')),
            ],
            options={
                'verbose_name': '异常检测服务',
                'verbose_name_plural': '异常检测服务',
                'ordering': ['-created_at'],
            },
        ),
    ]
