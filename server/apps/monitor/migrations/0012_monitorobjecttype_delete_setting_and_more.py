# Generated by Django 4.2.15 on 2025-10-21 07:24

from django.db import migrations, models
import django.db.models.deletion


def populate_monitor_object_types(apps, schema_editor):
    """
    在改变外键关系之前，先将 MonitorObject 中现有的 type 值迁移到 MonitorObjectType 表中
    """
    MonitorObject = apps.get_model('monitor', 'MonitorObject')
    MonitorObjectType = apps.get_model('monitor', 'MonitorObjectType')

    # 获取所有现有的 type 值（去重）
    existing_types = MonitorObject.objects.values_list('type', flat=True).distinct()

    # 为每个 type 创建对应的 MonitorObjectType 记录
    type_objects = []
    for type_value in existing_types:
        if type_value:  # 跳过空值
            type_objects.append(
                MonitorObjectType(
                    id=type_value,
                    description=f'{type_value}类型',
                    order=999,  # 默认排序值
                    created_by='system',
                    updated_by='system',
                    domain='domain.com',
                    updated_by_domain='domain.com'
                )
            )

    if type_objects:
        MonitorObjectType.objects.bulk_create(type_objects, ignore_conflicts=True)


class Migration(migrations.Migration):

    dependencies = [
        ('monitor', '0011_monitorobjectorganizationrule_monitor_instance_id'),
    ]

    operations = [
        migrations.CreateModel(
            name='MonitorObjectType',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='分类ID')),
                ('description', models.TextField(blank=True, verbose_name='分类描述')),
                ('order', models.IntegerField(db_index=True, default=999, verbose_name='排序')),
            ],
            options={
                'verbose_name': '监控对象分类',
                'verbose_name_plural': '监控对象分类',
                'ordering': ['order', 'id'],
            },
        ),
        # 数据迁移：填充 MonitorObjectType 表
        migrations.RunPython(populate_monitor_object_types, reverse_code=migrations.RunPython.noop),
        migrations.DeleteModel(
            name='Setting',
        ),
        migrations.AlterModelOptions(
            name='monitorobject',
            options={'ordering': ['type__order', 'order', 'id'], 'verbose_name': '监控对象', 'verbose_name_plural': '监控对象'},
        ),
        migrations.AddField(
            model_name='monitorobject',
            name='order',
            field=models.IntegerField(db_index=True, default=999, verbose_name='监控对象排序'),
        ),
        migrations.AlterField(
            model_name='monitorobject',
            name='type',
            field=models.ForeignKey(blank=True, db_column='type', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='monitor_objects', to='monitor.monitorobjecttype', verbose_name='监控对象分类'),
        ),
    ]
