[
  {
    "id": "Packetbeat_linux",
    "name": "Packetbeat",
    "controller_default_run": false,
    "icon": "",
    "node_operating_system": "linux",
    "service_type": "exec",
    "executable_path": "/opt/fusion-collectors/bin/packetbeat",
    "execute_parameters": "-c %s",
    "validation_parameters": "",
    "default_template": "",
    "introduction": "Packetbeat is a real-time network packet analyzer for application monitoring and network security analysis using official Logstash protocol.",
    "enabled_default_config": true,
    "default_config": {
      "nats": "# ================================== General ===================================\nname: \"packetbeat-${node.ip}-${node.cloud_region}\"\ntags: [\"bk-lite\", \"logstash\", \"network\"]\n# ================================== Logging ===================================\nlogging.level: info\nlogging.to_files: true\nlogging.files:\n  path: /opt/fusion-collectors/log/packetbeat\n  name: packetbeat\n  keepfiles: 7\n  permissions: 0600\n# ================================== Outputs ===================================\noutput.logstash:\n  hosts: [\"localhost:15044\"]\n  worker: 1\n  bulk_max_size: 2048\n  timeout: 30s\n  max_retries: 3\n# ================================== Interfaces ===================================\npacketbeat.interfaces.device: any\npacketbeat.interfaces.snaplen: 1514\npacketbeat.interfaces.type: af_packet\npacketbeat.interfaces.buffer_size_mb: 30\n# ================================== Processors ===================================\nprocessors:\n  - add_host_metadata:\n      when.not.contains.tags: forwarded\n\n  - script:\n      lang: javascript\n      source: >\n        function process(event) {\n          var evt = event.Get();\n          \n          // 标准化时间戳\n          if (evt['@timestamp']) {\n            event.Put('timestamp', evt['@timestamp']);\n          }\n          \n          // 基础网络信息提取\n          if (evt.source && evt.destination) {\n            event.Put('source_ip', evt.source.ip || 'unknown');\n            event.Put('source_port', evt.source.port || 0);\n            event.Put('destination_ip', evt.destination.ip || 'unknown');\n            event.Put('destination_port', evt.destination.port || 0);\n          }\n          \n          // HTTP基础信息提取\n          if (evt.type === 'http' && evt.http) {\n            event.Put('protocol_type', 'http');\n            event.Put('http_method', evt.http.request.method || 'unknown');\n            event.Put('http_status_code', evt.http.response.status_code || 0);\n          }\n          \n          return event;\n        }\n\n# ================================== Protocols ===================================\npacketbeat.protocols:\n# ================================== 健康检查模式 - 最小数据量 ==================================\n- type: http\n  ports: [8080]  # 仅监控8080端口，减少常见80端口的流量噪音\n  enabled: true\n\n  # 减少数据量配置\n  max_message_size: 1024  # 限制消息大小为1KB\n  transaction_timeout: 1s  # 减少事务超时时间\n\n  # 过滤配置 - 只监控特定路径\n  include_body_for: [\"application/json\"]\n  include_request_body: false\n  include_response_body: false\n\n  fields:\n    log_type: \"packetbeat\"\n    component: \"http\"\n    health_check_mode: true\n    node_ip: \"${node.ip}\"\n    cloud_region: \"${node.cloud_region}\"\n  fields_under_root: false\n"
    }
  }
]

