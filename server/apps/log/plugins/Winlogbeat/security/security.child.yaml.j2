# ================================== Security Event Log 配置 ==================================
- name: Security

  # ================================== 事件级别配置 ==================================
  level: {{ level | default('information') }}

  # ================================== 事件ID过滤配置 ==================================
  {% if event_ids %}
  # 指定收集的事件ID
  event_id:
    {% for event_id in event_ids %}
    - {{ event_id }}
    {% endfor %}
  {% else %}
  # 默认安全关键事件
  event_id: 4624,4625,4648,4672,4720,4722,4724,4728,4732,4756
  {% endif %}

  # ================================== 时间过滤配置 ==================================
  # 忽略过旧事件
  ignore_older: {{ ignore_older | default('72h') }}

  # ================================== 提供者过滤配置 ==================================
  {% if providers %}
  # 指定事件提供者
  providers:
    {% for provider in providers %}
    - {{ provider }}
    {% endfor %}
  {% endif %}

  # ================================== 高级过滤配置 ==================================
  {% if include_xml is defined %}
  # 包含原始XML
  include_xml: {{ include_xml | lower }}
  {% endif %}

  {% if batch_read_size %}
  # 批量读取大小
  batch_read_size: {{ batch_read_size }}
  {% endif %}

  {% if max_read_buffer %}
  # 最大读取缓冲区
  max_read_buffer: {{ max_read_buffer }}
  {% endif %}

  # ================================== 字段标识配置 ==================================
  fields:
    collect_type: "security"
    instance_id: "{{ instance_id }}"
    security_monitoring_scope: "{{ monitoring_scope | default('authentication_and_access') }}"
    {% if compliance_standard %}
    compliance_standard: "{{ compliance_standard }}"
    {% endif %}
    {% if custom_fields %}
    {% for key, value in custom_fields.items() %}
    {{ key }}: "{{ value }}"
    {% endfor %}
    {% endif %}
  fields_under_root: {{ fields_under_root | default(true) | lower }}

  # ================================== 处理器配置 ==================================
  processors:
    # 添加主机元数据
    - add_host_metadata:
        when.not.contains.tags: forwarded

    # Windows 安全事件增强处理
    - script:
        lang: javascript
        source: >
          function process(event) {
            var evt = event.Get();

            // 标准化时间戳
            if (evt['@timestamp']) {
              event.Put('timestamp', evt['@timestamp']);
            }

            // Windows 事件基础信息
            if (evt.winlog) {
              var winlog = evt.winlog;
              event.Put('event_id', winlog.event_id || 0);
              event.Put('event_provider', winlog.provider_name || 'Microsoft-Windows-Security-Auditing');
              event.Put('event_channel', winlog.channel || 'Security');
              event.Put('computer_name', winlog.computer_name || evt.host.name || 'unknown');
              event.Put('event_record_id', winlog.record_id || 0);

              // 提取事件数据
              if (winlog.event_data) {
                var eventData = winlog.event_data;
                var eventId = winlog.event_id;

                // 通用字段提取
                if (eventData.TargetUserName) {
                  event.Put('target_user_name', eventData.TargetUserName);
                }
                if (eventData.TargetDomainName) {
                  event.Put('target_domain_name', eventData.TargetDomainName);
                }
                if (eventData.SubjectUserName) {
                  event.Put('subject_user_name', eventData.SubjectUserName);
                }
                if (eventData.SubjectDomainName) {
                  event.Put('subject_domain_name', eventData.SubjectDomainName);
                }
                if (eventData.ProcessName) {
                  event.Put('process_name', eventData.ProcessName);
                }
                if (eventData.ProcessId) {
                  event.Put('process_id', parseInt(eventData.ProcessId, 16) || 0);
                }

                // 登录事件特定处理
                if ([4624, 4625, 4648].includes(eventId)) {
                  if (eventData.LogonType) {
                    var logonType = eventData.LogonType;
                    event.Put('logon_type', logonType);

                    // 登录类型名称映射
                    var logonTypeNames = {
                      '2': 'Interactive',
                      '3': 'Network',
                      '4': 'Batch',
                      '5': 'Service',
                      '7': 'Unlock',
                      '8': 'NetworkCleartext',
                      '9': 'NewCredentials',
                      '10': 'RemoteInteractive',
                      '11': 'CachedInteractive'
                    };
                    event.Put('logon_type_name', logonTypeNames[logonType] || 'Unknown');
                  }

                  if (eventData.IpAddress && eventData.IpAddress !== '-') {
                    event.Put('source_ip', eventData.IpAddress);
                  }
                  if (eventData.IpPort && eventData.IpPort !== '-') {
                    event.Put('source_port', parseInt(eventData.IpPort) || 0);
                  }
                  if (eventData.AuthenticationPackageName) {
                    event.Put('authentication_package', eventData.AuthenticationPackageName);
                  }
                  if (eventData.LogonProcessName) {
                    event.Put('logon_process', eventData.LogonProcessName);
                  }
                }

                // 登录失败事件特定处理
                if (eventId === 4625) {
                  if (eventData.Status) {
                    event.Put('status_code', eventData.Status);
                  }
                  if (eventData.SubStatus) {
                    event.Put('sub_status_code', eventData.SubStatus);
                  }
                  if (eventData.FailureReason) {
                    event.Put('failure_reason', eventData.FailureReason);
                  }
                }
              }

              // 事件类型分类
              var eventId = winlog.event_id;
              if (eventId === 4624) {
                event.Put('event_type', 'successful_logon');
              } else if (eventId === 4625) {
                event.Put('event_type', 'failed_logon');
              } else if (eventId === 4648) {
                event.Put('event_type', 'explicit_logon');
              } else if (eventId === 4672) {
                event.Put('event_type', 'special_privileges_assigned');
              } else if ([4720, 4722, 4724].includes(eventId)) {
                event.Put('event_type', 'user_account_management');
              } else if ([4728, 4732, 4756].includes(eventId)) {
                event.Put('event_type', 'group_management');
              } else {
                event.Put('event_type', 'security_event');
              }
            }

            return event;
          }

    # 安全事件风险评估和告警
    - script:
        lang: javascript
        source: >
          function process(event) {
            var evt = event.Get();
            var alerts = [];
            var riskScore = 0;
            var categories = [];

            var eventId = evt.event_id || 0;
            var eventType = evt.event_type || '';
            var logonType = evt.logon_type || '';
            var sourceIP = evt.source_ip || '';
            var targetUser = evt.target_user_name || '';
            var subjectUser = evt.subject_user_name || '';
            var statusCode = evt.status_code || '';

            // 基于事件类型的风险评估
            if (eventType === 'failed_logon') {
              riskScore += 3;
              categories.push('authentication_failure');

              // 暴力破解检测（需要基于时间窗口统计）
              var failureReasons = {
                '0xC0000064': 'user_not_found',
                '0xC000006A': 'wrong_password',
                '0xC0000234': 'account_locked',
                '0xC0000072': 'account_disabled',
                '0xC0000071': 'password_expired'
              };

              if (failureReasons[statusCode]) {
                event.Put('failure_category', failureReasons[statusCode]);
                if (statusCode === '0xC000006A') {
                  riskScore += 2; // 密码错误风险较高
                }
              }

              // 外部IP登录失败
              if (sourceIP && !sourceIP.startsWith('192.168.') &&
                  !sourceIP.startsWith('10.') && !sourceIP.startsWith('172.') &&
                  sourceIP !== '127.0.0.1' && sourceIP !== '-') {
                alerts.push('external_login_failure');
                riskScore += 5;
              }
            }

            // 登录类型风险评估
            if (eventType === 'successful_logon') {
              categories.push('successful_authentication');

              // 高风险登录类型
              if (logonType === '8') { // NetworkCleartext
                alerts.push('cleartext_authentication');
                riskScore += 6;
              } else if (logonType === '10') { // RemoteInteractive (RDP)
                categories.push('remote_desktop_login');
                riskScore += 2;

                // 外部RDP登录
                if (sourceIP && !sourceIP.startsWith('192.168.') &&
                    !sourceIP.startsWith('10.') && !sourceIP.startsWith('172.')) {
                  alerts.push('external_rdp_login');
                  riskScore += 4;
                }
              }
            }

            // 特权操作检测
            if (eventType === 'special_privileges_assigned') {
              alerts.push('privilege_escalation');
              riskScore += 7;
              categories.push('privilege_escalation');
            }

            // 账户管理操作
            if (eventType === 'user_account_management') {
              categories.push('account_management');
              riskScore += 3;

              if (eventId === 4720) { // 创建账户
                alerts.push('user_account_created');
                riskScore += 2;
              } else if (eventId === 4724) { // 重置密码
                alerts.push('password_reset');
                riskScore += 2;
              }
            }

            // 管理员账户监控
            var adminUsers = ['administrator', 'admin', 'root'];
            if (adminUsers.some(function(admin) {
              return (targetUser && targetUser.toLowerCase().includes(admin)) ||
                     (subjectUser && subjectUser.toLowerCase().includes(admin));
            })) {
              categories.push('admin_account_activity');
              riskScore += 2;
            }

            // 非工作时间活动
            var timestamp = new Date(evt.timestamp || evt['@timestamp']);
            var hour = timestamp.getHours();
            if (hour < 6 || hour > 22) {
              categories.push('off_hours_activity');
              riskScore += 1;
            }

            // 设置风险等级
            var riskLevel = 'low';
            if (riskScore >= 15) {
              riskLevel = 'critical';
            } else if (riskScore >= 10) {
              riskLevel = 'high';
            } else if (riskScore >= 5) {
              riskLevel = 'medium';
            }

            event.Put('security_categories', categories);
            event.Put('risk_score', riskScore);
            event.Put('risk_level', riskLevel);

            if (alerts.length > 0) {
              event.Put('security_alerts', alerts);
            }

            return event;
          }

    {% if processors %}
    # 用户自定义处理器
    {% for processor in processors %}
    - {{ processor | to_yaml | indent(6, True) }}
    {% endfor %}
    {% endif %}

    # 删除不必要的字段以减少存储
    - drop_fields:
        fields: ["agent.ephemeral_id", "agent.hostname", "agent.id", "agent.type", "agent.version"]
        ignore_missing: true

