# ================================== System Event Log 配置 ==================================
- name: System

  # ================================== 事件级别配置 ==================================
  level: {{ level | default('warning') }}

  # ================================== 事件ID过滤配置 ==================================
  {% if event_ids %}
  # 指定收集的事件ID
  event_id:
    {% for event_id in event_ids %}
    - {{ event_id }}
    {% endfor %}
  {% else %}
  # 默认系统关键事件
  event_id: 1074,6005,6006,6008,6009,6013,7034,7035,7036
  {% endif %}

  # ================================== 提供者过滤配置 ==================================
  {% if providers %}
  # 指定事件提供者
  providers:
    {% for provider in providers %}
    - {{ provider }}
    {% endfor %}
  {% endif %}

  # ================================== 时间过滤配置 ==================================
  # 忽略过旧事件
  ignore_older: {{ ignore_older | default('24h') }}

  # ================================== 字段标识配置 ==================================
  fields:
    collect_type: "system"
    instance_id: "{{ instance_id }}"
    system_monitoring_scope: "{{ monitoring_scope | default('services_and_lifecycle') }}"
    {% if environment %}
    environment: "{{ environment }}"
    {% endif %}
    {% if custom_fields %}
    {% for key, value in custom_fields.items() %}
    {{ key }}: "{{ value }}"
    {% endfor %}
    {% endif %}
  fields_under_root: {{ fields_under_root | default(true) | lower }}

  # ================================== 处理器配置 ==================================
  processors:
    # 添加主机元数据
    - add_host_metadata:
        when.not.contains.tags: forwarded

    # Windows 系统事件增强处理
    - script:
        lang: javascript
        source: >
          function process(event) {
            var evt = event.Get();

            // 标准化时间戳
            if (evt['@timestamp']) {
              event.Put('timestamp', evt['@timestamp']);
            }

            // Windows 事件基础信息
            if (evt.winlog) {
              var winlog = evt.winlog;
              event.Put('event_id', winlog.event_id || 0);
              event.Put('event_provider', winlog.provider_name || 'unknown');
              event.Put('event_channel', winlog.channel || 'System');
              event.Put('computer_name', winlog.computer_name || evt.host.name || 'unknown');
              event.Put('event_record_id', winlog.record_id || 0);

              // 事件级别标准化
              if (evt.log && evt.log.level) {
                event.Put('event_level', evt.log.level.toLowerCase());
              }

              // 提取事件数据
              if (winlog.event_data) {
                var eventData = winlog.event_data;
                var eventId = winlog.event_id;

                // 服务相关事件处理
                if ([7034, 7035, 7036].includes(eventId)) {
                  if (eventData.param1) {
                    event.Put('service_name', eventData.param1);
                  }
                  if (eventData.param2) {
                    event.Put('service_state', eventData.param2);
                  }
                }

                // 系统关机重启事件处理
                if (eventId === 1074) {
                  if (eventData.param1) {
                    event.Put('shutdown_user', eventData.param1);
                  }
                  if (eventData.param5) {
                    event.Put('shutdown_reason', eventData.param5);
                  }
                  if (eventData.param6) {
                    event.Put('shutdown_type', eventData.param6);
                  }
                }

                // 通用字段提取
                if (eventData.ProcessName) {
                  event.Put('process_name', eventData.ProcessName);
                }
                if (eventData.ProcessID) {
                  event.Put('process_id', parseInt(eventData.ProcessID) || 0);
                }
                if (eventData.UserName) {
                  event.Put('user_name', eventData.UserName);
                }
              }

              // 事件分类
              var eventId = winlog.event_id;
              if ([7034, 7035, 7036, 6005, 6006].includes(eventId)) {
                event.Put('event_category', 'service_control');
              } else if ([1074, 6008, 6009].includes(eventId)) {
                event.Put('event_category', 'system_lifecycle');
              } else if (eventId === 6013) {
                event.Put('event_category', 'performance');
              } else {
                event.Put('event_category', 'system_general');
              }
            }

            return event;
          }

    # 系统事件风险评估和告警
    - script:
        lang: javascript
        source: >
          function process(event) {
            var evt = event.Get();
            var alerts = [];
            var riskScore = 0;
            var categories = [];

            var eventId = evt.event_id || 0;
            var eventLevel = evt.event_level || 'information';
            var eventCategory = evt.event_category || '';
            var serviceName = evt.service_name || '';

            // 基于事件级别的风险评估
            if (eventLevel === 'critical') {
              riskScore += 10;
              alerts.push('critical_system_event');
              categories.push('critical_event');
            } else if (eventLevel === 'error') {
              riskScore += 5;
              categories.push('error_event');
            } else if (eventLevel === 'warning') {
              riskScore += 2;
              categories.push('warning_event');
            }

            // 基于事件ID的特定处理
            var criticalEvents = {
              6008: { alert: 'unexpected_shutdown', risk: 8 },
              7034: { alert: 'service_crashed', risk: 6 },
              1074: { alert: 'system_shutdown', risk: 3 }
            };

            if (criticalEvents[eventId]) {
              var eventInfo = criticalEvents[eventId];
              alerts.push(eventInfo.alert);
              riskScore += eventInfo.risk;
            }

            // 关键服务监控
            var criticalServices = [
              'EventLog', 'Windows Event Log', 'Security Accounts Manager',
              'Server', 'Workstation', 'Remote Procedure Call (RPC)',
              'DCOM Server Process Launcher', 'Windows Management Instrumentation',
              'Task Scheduler', 'Windows Update'
            ];

            if (serviceName && criticalServices.some(function(service) {
              return serviceName.toLowerCase().includes(service.toLowerCase());
            })) {
              categories.push('critical_service');
              riskScore += 3;

              if (eventId === 7034) { // 服务异常终止
                alerts.push('critical_service_crashed');
                riskScore += 5;
              }
            }

            // 事件类别风险评估
            if (eventCategory === 'service_control') {
              categories.push('service_management');
              if (eventId === 7034) {
                riskScore += 4; // 服务崩溃
              }
            } else if (eventCategory === 'system_lifecycle') {
              categories.push('system_state_change');
              if (eventId === 6008) {
                riskScore += 6; // 异常关机
              }
            }

            // 非工作时间系统变更
            var timestamp = new Date(evt.timestamp || evt['@timestamp']);
            var hour = timestamp.getHours();
            var isWeekend = timestamp.getDay() === 0 || timestamp.getDay() === 6;

            if ((hour < 6 || hour > 22) || isWeekend) {
              if (eventCategory === 'system_lifecycle' ||
                  (eventCategory === 'service_control' && eventId !== 7036)) {
                categories.push('off_hours_system_change');
                riskScore += 2;
              }
            }

            // 设置风险等级
            var riskLevel = 'low';
            if (riskScore >= 20) {
              riskLevel = 'critical';
            } else if (riskScore >= 15) {
              riskLevel = 'high';
            } else if (riskScore >= 8) {
              riskLevel = 'medium';
            }

            event.Put('system_categories', categories);
            event.Put('risk_score', riskScore);
            event.Put('risk_level', riskLevel);

            if (alerts.length > 0) {
              event.Put('system_alerts', alerts);
            }

            return event;
          }

    {% if processors %}
    # 用户自定义处理器
    {% for processor in processors %}
    - {{ processor | to_yaml | indent(6, True) }}
    {% endfor %}
    {% endif %}

    # 删除不必要的字段以减少存储
    - drop_fields:
        fields: ["agent.ephemeral_id", "agent.hostname", "agent.id", "agent.type", "agent.version"]
        ignore_missing: true
