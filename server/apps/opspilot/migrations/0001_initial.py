# Generated by Django 4.2.22 on 2025-10-09 03:08

import apps.core.encoders
import apps.core.mixinx
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_minio_backend.models
import django_yaml_field.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=255, verbose_name='名称')),
                ('introduction', models.TextField(blank=True, null=True, verbose_name='描述')),
                ('team', models.JSONField(default=list)),
                ('channels', models.JSONField(default=list)),
                ('enable_bot_domain', models.BooleanField(default=False, verbose_name='启用域名')),
                ('bot_domain', models.CharField(blank=True, max_length=255, null=True, verbose_name='域名')),
                ('enable_node_port', models.BooleanField(default=False, verbose_name='启用端口映射')),
                ('node_port', models.IntegerField(default=5005, verbose_name='端口映射')),
                ('online', models.BooleanField(default=False, verbose_name='是否上线')),
                ('enable_ssl', models.BooleanField(default=False, verbose_name='启用SSL')),
                ('api_token', models.CharField(blank=True, default='', max_length=64, null=True, verbose_name='API Token')),
                ('replica_count', models.IntegerField(default=1, verbose_name='副本数量')),
                ('bot_type', models.IntegerField(choices=[(1, 'Pilot'), (2, 'LobeChat'), (3, 'ChatFlow')], default=1, verbose_name='类型')),
            ],
            options={
                'verbose_name': '机器人',
                'verbose_name_plural': '机器人',
                'db_table': 'bot_mgmt_bot',
            },
        ),
        migrations.CreateModel(
            name='BotConversationHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('conversation_role', models.CharField(choices=[('user', '用户'), ('bot', '机器人')], max_length=255, verbose_name='对话角色')),
                ('conversation', models.TextField(verbose_name='对话内容')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('citing_knowledge', models.JSONField(blank=True, default=list, null=True, verbose_name='引用知识')),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opspilot.bot', verbose_name='机器人')),
            ],
            options={
                'verbose_name': '对话历史',
                'verbose_name_plural': '对话历史',
                'db_table': 'bot_mgmt_botconversationhistory',
            },
        ),
        migrations.CreateModel(
            name='BotWorkFlow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flow_json', models.JSONField(default=list, verbose_name='流程数据')),
                ('web_json', models.JSONField(default=dict, verbose_name='前端数据')),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opspilot.bot', verbose_name='机器人')),
            ],
            options={
                'verbose_name': '机器人工作流',
                'verbose_name_plural': '机器人工作流',
            },
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('channel_type', models.CharField(choices=[('enterprise_wechat', 'Enterprise WeChat'), ('enterprise_wechat_bot', 'Enterprise WeChat Bot'), ('wechat_official_account', 'WeChat Official Account'), ('ding_talk', 'Ding Talk'), ('web', 'Web'), ('gitlab', 'GitLab')], max_length=100, verbose_name='channel type')),
                ('channel_config', django_yaml_field.fields.YAMLField(blank=True, null=True, verbose_name='channel config')),
                ('enabled', models.BooleanField(default=False, verbose_name='enabled')),
            ],
            options={
                'verbose_name': 'channel',
                'verbose_name_plural': 'channel',
                'db_table': 'channel_mgmt_channel',
            },
            bases=(models.Model, apps.core.mixinx.EncryptMixin),
        ),
        migrations.CreateModel(
            name='ChannelGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('group_id', models.CharField(max_length=100)),
                ('channel_type', models.CharField(choices=[('enterprise_wechat', 'Enterprise WeChat'), ('enterprise_wechat_bot', 'Enterprise WeChat Bot'), ('wechat_official_account', 'WeChat Official Account'), ('ding_talk', 'Ding Talk'), ('web', 'Web'), ('gitlab', 'GitLab')], max_length=100, verbose_name='channel type')),
            ],
            options={
                'db_table': 'bot_mgmt_channelgroup',
            },
        ),
        migrations.CreateModel(
            name='ChannelUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=100, verbose_name='用户ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='名称')),
                ('channel_type', models.CharField(choices=[('enterprise_wechat', 'Enterprise WeChat'), ('enterprise_wechat_bot', 'Enterprise WeChat Bot'), ('wechat_official_account', 'WeChat Official Account'), ('ding_talk', 'Ding Talk'), ('web', 'Web'), ('gitlab', 'GitLab')], max_length=100, verbose_name='channel type')),
            ],
            options={
                'verbose_name': '消息通道用户',
                'verbose_name_plural': '消息通道用户',
                'db_table': 'bot_mgmt_channeluser',
            },
        ),
        migrations.CreateModel(
            name='EmbedProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='名称')),
                ('embed_config', models.JSONField(blank=True, default=dict, encoder=apps.core.encoders.PrettyJSONEncoder, null=True, verbose_name='嵌入配置')),
                ('enabled', models.BooleanField(default=True, verbose_name='是否启用')),
                ('team', models.JSONField(default=list)),
                ('is_build_in', models.BooleanField(default=False, verbose_name='是否内置')),
            ],
            options={
                'verbose_name': 'Embed模型',
                'verbose_name_plural': 'Embed模型',
                'db_table': 'model_provider_mgmt_embedprovider',
            },
            bases=(models.Model, apps.core.mixinx.EncryptMixin),
        ),
        migrations.CreateModel(
            name='KnowledgeBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('introduction', models.TextField(blank=True, null=True)),
                ('team', models.JSONField(default=list)),
                ('enable_rerank', models.BooleanField(default=True, verbose_name='Enable Rerank')),
                ('rerank_top_k', models.IntegerField(default=10, verbose_name='Rerank Top K')),
                ('search_type', models.CharField(default='similarity_score_threshold', max_length=50, verbose_name='Search Type')),
                ('score_threshold', models.FloatField(default=0.7, verbose_name='Score threshold')),
                ('enable_naive_rag', models.BooleanField(default=True)),
                ('enable_qa_rag', models.BooleanField(default=True)),
                ('enable_graph_rag', models.BooleanField(default=False)),
                ('rag_recall_mode', models.CharField(default='chunk', max_length=20)),
                ('rag_size', models.IntegerField(default=50)),
                ('qa_size', models.IntegerField(default=50, verbose_name='QA size')),
                ('graph_size', models.IntegerField(default=50, verbose_name='Graph size')),
                ('embed_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opspilot.embedprovider', verbose_name='Embed Model')),
            ],
            options={
                'db_table': 'knowledge_mgmt_knowledgebase',
            },
        ),
        migrations.CreateModel(
            name='KnowledgeDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='name')),
                ('chunk_size', models.IntegerField(default=0, verbose_name='chunk size')),
                ('train_status', models.IntegerField(choices=[(0, 'Training'), (1, 'Ready'), (2, 'Error'), (3, 'Pending'), (4, 'Chunking')], default=0, verbose_name='train status')),
                ('train_progress', models.FloatField(default=0, verbose_name='train progress')),
                ('general_parse_chunk_size', models.IntegerField(default=256, verbose_name='general parse chunk size')),
                ('general_parse_chunk_overlap', models.IntegerField(default=32, verbose_name='general parse chunk overlap')),
                ('enable_ocr_parse', models.BooleanField(default=False, verbose_name='enable OCR parse')),
                ('mode', models.CharField(default='full', max_length=30, verbose_name='mode')),
                ('chunk_type', models.CharField(default='fixed_size', max_length=30, verbose_name='chunk type')),
                ('knowledge_source_type', models.CharField(default='file', max_length=20, verbose_name='source type')),
                ('knowledge_base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opspilot.knowledgebase')),
            ],
            options={
                'verbose_name': 'Knowledge Document',
                'verbose_name_plural': 'Knowledge Document',
                'db_table': 'knowledge_mgmt_knowledgedocument',
            },
        ),
        migrations.CreateModel(
            name='KnowledgeTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_name', models.CharField(max_length=100, verbose_name='Task Name')),
                ('train_progress', models.FloatField(default=0, verbose_name='Train Progress')),
                ('knowledge_ids', models.JSONField(default=list, verbose_name='Knowledge IDs')),
                ('knowledge_base_id', models.IntegerField(default=0, verbose_name='Knowledge IDs')),
                ('created_by', models.CharField(max_length=100, verbose_name='Created By')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('is_qa_task', models.BooleanField(default=False, verbose_name='Is QA Task')),
                ('completed_count', models.IntegerField(default=0)),
                ('total_count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='LLMModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='名称')),
                ('llm_config', models.JSONField(blank=True, default=dict, encoder=apps.core.encoders.PrettyJSONEncoder, null=True, verbose_name='LLM配置')),
                ('enabled', models.BooleanField(default=True, verbose_name='启用')),
                ('team', models.JSONField(default=list)),
                ('is_build_in', models.BooleanField(default=True, verbose_name='是否内置')),
                ('is_demo', models.BooleanField(default=False)),
                ('label', models.CharField(blank=True, max_length=100, null=True, verbose_name='标签')),
            ],
            options={
                'verbose_name': 'LLM模型',
                'verbose_name_plural': 'LLM模型',
                'db_table': 'model_provider_mgmt_llmmodel',
            },
            bases=(models.Model, apps.core.mixinx.EncryptMixin),
        ),
        migrations.CreateModel(
            name='LLMSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=255, verbose_name='名称')),
                ('skill_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='技能ID')),
                ('skill_prompt', models.TextField(blank=True, null=True, verbose_name='技能提示词')),
                ('enable_conversation_history', models.BooleanField(default=False, verbose_name='启用对话历史')),
                ('conversation_window_size', models.IntegerField(default=10, verbose_name='对话窗口大小')),
                ('enable_rag', models.BooleanField(default=False, verbose_name='启用RAG')),
                ('enable_rag_knowledge_source', models.BooleanField(default=False, verbose_name='显示RAG知识来源')),
                ('rag_score_threshold_map', models.JSONField(default=dict, verbose_name='知识库RAG分数阈值映射')),
                ('introduction', models.TextField(blank=True, default='', null=True, verbose_name='介绍')),
                ('team', models.JSONField(default=list, verbose_name='分组')),
                ('show_think', models.BooleanField(default=True)),
                ('tools', models.JSONField(default=list)),
                ('temperature', models.FloatField(default=0.7, verbose_name='温度')),
                ('skill_type', models.IntegerField(choices=[(1, 'Basic Tool'), (2, 'Knowledge Tool'), (3, 'Plan Execute'), (4, 'Lats')], default=1, verbose_name='技能类型')),
                ('enable_rag_strict_mode', models.BooleanField(default=False, verbose_name='启用RAG严格模式')),
                ('is_template', models.BooleanField(default=False, verbose_name='是否模板')),
                ('enable_km_route', models.BooleanField(default=False, verbose_name='启用知识库路由')),
                ('guide', models.TextField(blank=True, default='', null=True, verbose_name='技能引导')),
                ('enable_suggest', models.BooleanField(default=False, verbose_name='启用建议')),
                ('enable_query_rewrite', models.BooleanField(default=False, verbose_name='问题优化')),
                ('km_llm_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='km_llm_model', to='opspilot.llmmodel')),
                ('knowledge_base', models.ManyToManyField(blank=True, to='opspilot.knowledgebase', verbose_name='知识库')),
                ('llm_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opspilot.llmmodel', verbose_name='LLM模型')),
            ],
            options={
                'verbose_name': 'LLM技能管理',
                'verbose_name_plural': 'LLM技能管理',
                'db_table': 'model_provider_mgmt_llmskill',
            },
        ),
        migrations.CreateModel(
            name='ModelType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='模型类型名称')),
                ('display_name', models.CharField(max_length=100, verbose_name='显示名称')),
                ('icon', models.CharField(blank=True, max_length=100, null=True, verbose_name='图标')),
                ('is_build_in', models.BooleanField(default=False)),
                ('index', models.IntegerField(default=0, verbose_name='排序')),
                ('tags', models.JSONField(default=list)),
            ],
        ),
        migrations.CreateModel(
            name='QuotaRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('target_type', models.CharField(max_length=10, verbose_name='Target Type')),
                ('target_list', models.JSONField(default=list, verbose_name='Target List')),
                ('rule_type', models.CharField(max_length=10, verbose_name='Rule Type')),
                ('file_size', models.FloatField(default=0, verbose_name='Total Size')),
                ('unit', models.CharField(max_length=10, verbose_name='Size Unit')),
                ('skill_count', models.IntegerField(default=0, verbose_name='Skill Count')),
                ('bot_count', models.IntegerField(default=0, verbose_name='Bot Count')),
            ],
            options={
                'db_table': 'base_quotarule',
            },
        ),
        migrations.CreateModel(
            name='RasaModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=255, verbose_name='模型名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='描述')),
                ('model_file', models.FileField(blank=True, null=True, storage=django_minio_backend.models.MinioBackend(bucket_name='munchkin-private'), upload_to='rasa_models', verbose_name='文件')),
            ],
            options={
                'verbose_name': '模型',
                'verbose_name_plural': '模型',
                'db_table': 'bot_mgmt_rasamodel',
            },
        ),
        migrations.CreateModel(
            name='SkillTools',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('params', models.JSONField(default=dict)),
                ('team', models.JSONField(default=list)),
                ('description', models.TextField()),
                ('tags', models.JSONField(default=list)),
                ('icon', models.CharField(default='', max_length=100)),
                ('is_build_in', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'model_provider_mgmt_skilltools',
            },
        ),
        migrations.CreateModel(
            name='WorkFlowTaskResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_time', models.DateTimeField(auto_now_add=True, verbose_name='运行时间')),
                ('status', models.CharField(max_length=50, verbose_name='状态')),
                ('input_data', models.TextField(verbose_name='输入数据')),
                ('output_data', models.JSONField(default=dict, verbose_name='输出数据')),
                ('last_output', models.TextField(blank=True, null=True, verbose_name='最后输出')),
                ('execute_type', models.CharField(default='restful', max_length=50)),
                ('bot_work_flow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opspilot.botworkflow', verbose_name='机器人工作流')),
            ],
        ),
        migrations.CreateModel(
            name='WebPageKnowledge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(verbose_name='URL')),
                ('max_depth', models.IntegerField(default=1, verbose_name='max depth')),
                ('sync_enabled', models.BooleanField(default=False, verbose_name='Sync Enabled')),
                ('sync_time', models.CharField(blank=True, null=True, verbose_name='Sync Time')),
                ('knowledge_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opspilot.knowledgedocument', verbose_name='Knowledge Document')),
            ],
            options={
                'verbose_name': 'Web Page Knowledge',
                'verbose_name_plural': 'Web Page Knowledge',
                'db_table': 'knowledge_mgmt_webpageknowledge',
            },
            bases=(models.Model, apps.core.mixinx.PeriodicTaskUtils),
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opspilot.channelgroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opspilot.channeluser')),
            ],
            options={
                'db_table': 'bot_mgmt_usergroup',
            },
        ),
        migrations.CreateModel(
            name='SkillRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=255, verbose_name='规则名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='描述')),
                ('condition', models.JSONField(default=dict, verbose_name='条件')),
                ('action', models.IntegerField(choices=[(0, 'Use specified knowledge base')], default=0, verbose_name='动作')),
                ('action_set', models.JSONField(default=dict, verbose_name='动作设置')),
                ('is_enabled', models.BooleanField(default=True, verbose_name='是否启用')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opspilot.llmskill', verbose_name='技能')),
            ],
            options={
                'db_table': 'model_provider_mgmt_skillrule',
            },
        ),
        migrations.CreateModel(
            name='SkillRequestLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('current_ip', models.GenericIPAddressField()),
                ('state', models.BooleanField(default=True)),
                ('request_detail', models.JSONField(default=dict)),
                ('response_detail', models.JSONField(default=dict)),
                ('user_message', models.TextField(default='')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opspilot.llmskill', verbose_name='技能')),
            ],
            options={
                'db_table': 'model_provider_mgmt_skillrequestlog',
            },
        ),
        migrations.CreateModel(
            name='RerankProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='名称')),
                ('rerank_config', models.JSONField(blank=True, default=dict, encoder=apps.core.encoders.PrettyJSONEncoder, null=True, verbose_name='Rerank配置')),
                ('enabled', models.BooleanField(default=True, verbose_name='是否启用')),
                ('team', models.JSONField(default=list)),
                ('is_build_in', models.BooleanField(default=False, verbose_name='是否内置')),
                ('model_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='opspilot.modeltype', verbose_name='模型类型')),
            ],
            options={
                'verbose_name': 'Rerank模型',
                'verbose_name_plural': 'Rerank模型',
                'db_table': 'model_provider_mgmt_rerankprovider',
            },
            bases=(models.Model, apps.core.mixinx.EncryptMixin),
        ),
        migrations.CreateModel(
            name='QAPairs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('name', models.CharField(max_length=255, verbose_name='问答对名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='描述')),
                ('qa_count', models.IntegerField(default=0, verbose_name='问答对数量')),
                ('generate_count', models.IntegerField(default=0, verbose_name='生成的数据')),
                ('document_id', models.IntegerField(default=0, verbose_name='文档ID')),
                ('document_source', models.CharField(default='file', max_length=50, verbose_name='文档来源')),
                ('status', models.CharField(default='completed', max_length=50, verbose_name='状态')),
                ('create_type', models.CharField(default='document', max_length=20)),
                ('question_prompt', models.TextField(blank=True, default='', null=True, verbose_name='问题提示词')),
                ('answer_prompt', models.TextField(blank=True, default='', null=True, verbose_name='答案提示词')),
                ('answer_llm_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answer_llm_model', to='opspilot.llmmodel')),
                ('knowledge_base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opspilot.knowledgebase')),
                ('llm_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opspilot.llmmodel')),
            ],
            options={
                'verbose_name': 'Maintainer Fields',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OCRProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='名称')),
                ('ocr_config', models.JSONField(blank=True, default=dict, null=True, verbose_name='OCR配置')),
                ('enabled', models.BooleanField(default=True, verbose_name='是否启用')),
                ('team', models.JSONField(default=list)),
                ('is_build_in', models.BooleanField(default=True, verbose_name='是否内置')),
                ('model_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='opspilot.modeltype', verbose_name='模型类型')),
            ],
            options={
                'verbose_name': 'OCR模型',
                'verbose_name_plural': 'OCR模型',
                'db_table': 'model_provider_mgmt_ocrprovider',
            },
            bases=(models.Model, apps.core.mixinx.EncryptMixin),
        ),
        migrations.CreateModel(
            name='ManualKnowledge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='content')),
                ('knowledge_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opspilot.knowledgedocument', verbose_name='Knowledge Document')),
            ],
            options={
                'verbose_name': 'Manual Knowledge',
                'verbose_name_plural': 'Manual Knowledge',
                'db_table': 'knowledge_mgmt_manualknowledge',
            },
        ),
        migrations.AddField(
            model_name='llmmodel',
            name='model_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='opspilot.modeltype', verbose_name='模型类型'),
        ),
        migrations.CreateModel(
            name='KnowledgeGraph',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Time')),
                ('created_by', models.CharField(default='', max_length=32, verbose_name='Creator')),
                ('updated_by', models.CharField(default='', max_length=32, verbose_name='Updater')),
                ('domain', models.CharField(default='domain.com', max_length=100, verbose_name='Domain')),
                ('updated_by_domain', models.CharField(default='domain.com', max_length=100, verbose_name='updated by domain')),
                ('rebuild_community', models.BooleanField(default=False, verbose_name='是否重建社区')),
                ('doc_list', models.JSONField(default=list)),
                ('status', models.CharField(default='completed', max_length=50, verbose_name='状态')),
                ('embed_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opspilot.embedprovider')),
                ('knowledge_base', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='opspilot.knowledgebase')),
                ('llm_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opspilot.llmmodel')),
                ('rerank_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opspilot.rerankprovider')),
            ],
            options={
                'verbose_name': 'Maintainer Fields',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='knowledgedocument',
            name='ocr_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opspilot.ocrprovider', verbose_name='OCR model'),
        ),
        migrations.AddField(
            model_name='knowledgedocument',
            name='semantic_chunk_parse_embedding_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opspilot.embedprovider', verbose_name='embedding model'),
        ),
        migrations.AddField(
            model_name='knowledgebase',
            name='rerank_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opspilot.rerankprovider', verbose_name='Rerank Model'),
        ),
        migrations.CreateModel(
            name='GraphChunkMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chunk_id', models.CharField(max_length=255, verbose_name='Chunk ID')),
                ('graph_id', models.CharField(max_length=255, verbose_name='Graph ID')),
                ('knowledge_graph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opspilot.knowledgegraph')),
            ],
        ),
        migrations.CreateModel(
            name='FileKnowledge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(storage=django_minio_backend.models.MinioBackend(bucket_name='munchkin-private'), upload_to=django_minio_backend.models.iso_date_prefix, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['md', 'docx', 'xlsx', 'csv', 'pptx', 'pdf', 'txt', 'png', 'jpg', 'jpeg'])], verbose_name='File')),
                ('knowledge_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opspilot.knowledgedocument', verbose_name='Knowledge Document')),
            ],
            options={
                'verbose_name': 'File Knowledge',
                'verbose_name_plural': 'File Knowledge',
                'db_table': 'knowledge_mgmt_fileknowledge',
            },
        ),
        migrations.AddField(
            model_name='embedprovider',
            name='model_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='opspilot.modeltype', verbose_name='模型类型'),
        ),
        migrations.CreateModel(
            name='ConversationTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(verbose_name='问题')),
                ('content', models.TextField(verbose_name='内容')),
                ('knowledge_base_id', models.IntegerField(verbose_name='知识库ID')),
                ('knowledge_document_id', models.IntegerField(verbose_name='知识文档ID')),
                ('answer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opspilot.botconversationhistory', verbose_name='回答')),
            ],
            options={
                'db_table': 'bot_mgmt_conversationtag',
            },
        ),
        migrations.AddField(
            model_name='botconversationhistory',
            name='channel_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opspilot.channeluser', verbose_name='通道用户'),
        ),
        migrations.CreateModel(
            name='BotChannel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('channel_type', models.CharField(choices=[('enterprise_wechat', 'Enterprise WeChat'), ('enterprise_wechat_bot', 'Enterprise WeChat Bot'), ('wechat_official_account', 'WeChat Official Account'), ('ding_talk', 'Ding Talk'), ('web', 'Web'), ('gitlab', 'GitLab')], max_length=100, verbose_name='channel type')),
                ('channel_config', django_yaml_field.fields.YAMLField(blank=True, null=True, verbose_name='channel config')),
                ('enabled', models.BooleanField(default=False, verbose_name='enabled')),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opspilot.bot', verbose_name='机器人')),
            ],
            options={
                'db_table': 'bot_mgmt_botchannel',
            },
            bases=(models.Model, apps.core.mixinx.EncryptMixin),
        ),
        migrations.AddField(
            model_name='bot',
            name='llm_skills',
            field=models.ManyToManyField(blank=True, to='opspilot.llmskill', verbose_name='LLM技能'),
        ),
        migrations.AddField(
            model_name='bot',
            name='rasa_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opspilot.rasamodel', verbose_name='模型'),
        ),
    ]
