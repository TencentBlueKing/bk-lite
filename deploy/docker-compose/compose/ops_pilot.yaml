networks:
  prod:

volumes:
  minio:
  rabbitmq:
  elasticsearch:

services:
  minio:
    image: ${DOCKER_IMAGE_MINIO}
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio:/data
    networks:
      - prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/ready"]
  
  rabbitmq:
    image: ${DOCKER_IMAGE_RABBITMQ}
    restart: always
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASSWORD}
    ports:
      - "5672:5672"
    networks:
      - prod
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
  
  metis:
    image: ${DOCKER_IMAGE_METIS}
    restart: always
    environment:
      DB_URI: postgresql+psycopg://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@pgvector:5432/metis
      SECRET_KEY: ${SECRET_KEY}
      MODE: DEBUG
      TRANSFORMERS_OFFLINE: true
      HF_DATASETS_OFFLINE: true
      ADMIN_PASSWORD: password
      KNOWLEDGE_GRAPH_HOST: falkordb
      KNOWLEDGE_GRAPH_PASSWORD: ${FALKORDB_PASSWORD}
      KNOWLEDGE_GRAPH_PORT: 6379
      GRAPHITI_TELEMETRY_ENABLED: "false"
    networks:
      - prod
    depends_on:
      postgres:
        condition: service_healthy
      server:
        condition: service_healthy
      falkordb:
        condition: service_healthy

  pgvector:
    image: ${DOCKER_IMAGE_PGVECTOR}
    restart: always
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: metis
    networks:
      - prod