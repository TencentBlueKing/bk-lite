networks:
  prod:

volumes:
  rabbitmq:
  elasticsearch:
  falkordb-opspilot:

services:
  
  rabbitmq:
    image: ${DOCKER_IMAGE_RABBITMQ}
    restart: always
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASSWORD}
    ports:
      - "5672:5672"
    networks:
      - prod
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
  
  metis:
    image: ${DOCKER_IMAGE_METIS}
    restart: always
    environment:
      DB_URI: postgresql+psycopg://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@pgvector:5432/metis
      SECRET_KEY: ${SECRET_KEY}
      MODE: DEBUG
      TRANSFORMERS_OFFLINE: true
      HF_DATASETS_OFFLINE: true
      ADMIN_PASSWORD: password
      KNOWLEDGE_GRAPH_HOST: falkordb-opspilot
      KNOWLEDGE_GRAPH_PASSWORD: ${FALKORDB_PASSWORD}
      KNOWLEDGE_GRAPH_PORT: 6379
      GRAPHITI_TELEMETRY_ENABLED: "false"
      OPENAI_API_KEY: ""
      UV_OFFLINE: true
    networks:
      - prod
    depends_on:
      postgres:
        condition: service_healthy
      server:
        condition: service_healthy
      falkordb-opspilot:
        condition: service_healthy

  pgvector:
    image: ${DOCKER_IMAGE_PGVECTOR}
    restart: always
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: metis
    networks:
      - prod

  falkordb-opspilot:
    image: ${DOCKER_IMAGE_FALKORDB}
    restart: always
    environment:
      - REDIS_ARGS=--requirepass ${FALKORDB_PASSWORD}
      - FALKORDB_ARGS=THREAD_COUNT 4
    networks:
      - prod
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "redis", "-p", "6379", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - falkordb-opspilot:/var/lib/falkordb/data